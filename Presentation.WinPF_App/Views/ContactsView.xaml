<UserControl x:Class="Presentation.WinPF_App.Views.ContactsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Presentation.WinPF_App.Views"
             xmlns:viewmodels="clr-namespace:Presentation.WinPF_App.ViewModels"
             xmlns:models="clr-namespace:Domain.Models;assembly=Domain"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             d:DataContext="{d:DesignInstance Type=viewmodels:ContactsViewModel}"
             mc:Ignorable="d" 
             Background="Transparent"
             d:DesignHeight="700" d:DesignWidth="450">
    <Border Background="#333335" CornerRadius="0 0 10 10" Padding="10">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" Text="{Binding Headline, FallbackValue='CONTACT LIST'}" Style="{StaticResource HeadlineText}" Margin=" 0 0 0 20"/>

            <ListView  Grid.Row="1" ItemsSource="{Binding Contacts}" Margin="0 20 0 0" HorizontalContentAlignment="Stretch"
                       Style="{StaticResource ListViewStyle}">
                <ListView.ItemTemplate>
                    <DataTemplate DataType="models:Contact">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <StackPanel Grid.Column="0">
                                <TextBlock Text="{Binding FullName}" Style="{StaticResource ListContactNameText}"/>
                                <TextBlock Text="{Binding DisplayPhoneOrEmail}" Style="{StaticResource ListMainContactForm}"/>
                            </StackPanel>
                            <StackPanel Grid.Column="1" Orientation="Horizontal">
                                <Button CommandParameter="{Binding .}" Command="{Binding DataContext.EditContactCommand, 
                                RelativeSource={RelativeSource AncestorType=UserControl}}" 
                                 Content="&#xE70F;" Style="{StaticResource ListIconButton}" />
                                <Button CommandParameter="{Binding .}" Command="{Binding DataContext.DeleteContactCommand, 
                                RelativeSource={RelativeSource AncestorType=UserControl}}"
                                    Content="&#xE74D;" Style="{StaticResource ListIconButton}" />
                            </StackPanel>
                            <!-- I wanted the ContactDetailView to open when clicking on the contact "list area", 
                        so I asked copilot. It gave me an event-based solution, which seemed 
                        to go against what we are trying to achieve with MVVM. When asked about 
                        solutions that comply with MVVM best practice, it mentioned a NuGet package 
                        that allows to implement Behaviours, such as binding an event to a command.

                        This bit is therefore AI generated then edited to match my DataContext. 
                        It triggers an event (click) and calls a command, 
                        so that the view and the viewmodel logic can stay separated-->
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonUp">
                                    <i:InvokeCommandAction Command="{Binding DataContext.GoToContactDetailCommand, 
                                    RelativeSource={RelativeSource AncestorType=UserControl}}" CommandParameter="{Binding .}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <!-- End of AI generated code  -->
                        </Grid>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>

            <Button Grid.Row="2" 
                    Content="NEW CONTACT" 
                    Style="{StaticResource StandardButton}" 
                    Margin="10"
                    Command="{Binding GoToNewContactCommand}"/>
        </Grid>
    </Border>
</UserControl>
